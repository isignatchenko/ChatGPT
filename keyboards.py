from aiogram import types


# –°—Ç–∞—Ä—Ç–æ–≤—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

# Main Start

def main_menu_keyboard():
    buttons = [
        types.InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help"),
        types.InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"),
        types.InlineKeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="top_up")
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    return keyboard


def buy_keyboard(amount):
    buttons = [
        types.InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"buy&{amount}"),
        types.InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="go_to_main_menu")
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    return keyboard


def go_to_main_menu():
    buttons = [
        types.InlineKeyboardButton(text="‚è™ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="go_to_main_menu")
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    return keyboard


def go_to_main_menu_if_new():
    buttons = [
        types.InlineKeyboardButton(text="‚è© –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="go_to_main_menu")
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    return keyboard


def edit_parameter_keyboard(parameter, action, value):
    if action == "regular":
        buttons = [
            types.InlineKeyboardButton(text="‚ûï", callback_data=f"edit_parameter&plus&{parameter}&{value}"),
            types.InlineKeyboardButton(text="‚ûñ", callback_data=f"edit_parameter&minus&{parameter}&{value}"),
            types.InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data=f"set_parameter&{parameter}&{value}")
        ]
    elif action == "max":
        buttons = [
            types.InlineKeyboardButton(text="‚ûñ", callback_data=f"edit_parameter&minus&{parameter}&{value}"),
            types.InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data=f"set_parameter&{parameter}&{value}")
        ]
    else:
        buttons = [
            types.InlineKeyboardButton(text="‚ûï", callback_data=f"edit_parameter&plus&{parameter}&{value}"),
            types.InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data=f"set_parameter&{parameter}&{value}")
        ]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    return keyboard


def choose_parameter_keyboard(users_temperature, frequency_penalty, presence_penalty):
    buttons = [
        types.InlineKeyboardButton(text="Temperature",
                                   callback_data=f"edit_parameter&regular&temperature&{users_temperature}"),
        types.InlineKeyboardButton(text="Frequency penalty",
                                   callback_data=f"edit_parameter&regular&frequency_penalty&{frequency_penalty}"),
        types.InlineKeyboardButton(text="Presence penalty",
                                   callback_data=f"edit_parameter&regular&presence_penalty&{presence_penalty}"),
        types.InlineKeyboardButton(text="‚è™ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                   callback_data=f"go_to_main_menu")
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    return keyboard


def parameter_update_done_keyboard():
    buttons = [
        types.InlineKeyboardButton(text="‚è™ –í –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫", callback_data="settings")
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    return keyboard


# –ö–æ–º–∞–Ω–¥—ã —Ö–µ–ª–ø–µ—Ä –∫–ª–∞–≤–∞

def commands_helper_keyboard():
    kb = [
        [types.KeyboardButton(text="/start ‚Äî –í—ã–∑–≤–∞—Ç—å –º–µ–Ω—é")],
        [types.KeyboardButton(text="/clear ‚Äî –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞")],
        # [types.KeyboardButton(text="/img ‚Äî –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É")]
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    return keyboard
